package stream.advanced;

import java.math.BigDecimal;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;

//Custom Class Stream Processing:
// Given a list of Order objects with id, price, and quantity fields,
// use streams to find the total revenue generated by all orders (i.e., sum of price * quantity).
public class CustomClassStreamProcessing {
    public static void main(String[] args) {
        List<Order> orders = new ArrayList<>();
        orders.add(new Order(1, new BigDecimal("19.3"), 3));
        orders.add(new Order(2, new BigDecimal("192.1"), 1));
        orders.add(new Order(3, new BigDecimal("11.9"), 6));
        orders.add(new Order(4, new BigDecimal("26.8"), 4));
        orders.add(new Order(5, new BigDecimal("5.9"), 5));


        Map<Integer, BigDecimal> collect = orders.stream()
                .collect(Collectors.toMap(Order::getId,
                        order -> order.getPrice().multiply(BigDecimal.valueOf(order.getQuantity()))));
        System.out.println(collect);
    }
}

class Order {
    private int id;
    private BigDecimal price;
    private int quantity;

    public Order() {
    }

    public Order(int id, BigDecimal price, int quantity) {
        this.id = id;
        this.price = price;
        this.quantity = quantity;
    }

    public int getId() {
        return id;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    @Override
    public String toString() {
        return MessageFormat.format("id={0}, price={1}, quantity={2}", id, price, quantity);
    }
}
